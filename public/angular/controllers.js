// Generated by CoffeeScript 1.9.0
var AppCtrl, Audio, DataClass, DataElement, GameClock, GameDataCtrl, GuestTeam, HeaderController, HomeTeam, LowerThirds, RosterController, RouteController, Scoreboard, Team,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

DataClass = (function() {
  DataClass.prototype.data = [];

  DataClass.scope = null;

  function DataClass(scope) {
    DataClass.scope = scope;
  }

  DataClass.prototype.registerElem = function(key, obj) {
    console.log("Element " + key + " registered");
    this.data[key] = obj;
    return console.log(this.data);
  };

  DataClass.prototype.recv = function(key, value, callApply) {
    var error, model;
    if (callApply == null) {
      callApply = false;
    }
    console.log("receiving " + key);
    try {
      model = this.data[key].model;
      $.extend(model, value);
      return this.data[key].refreshGUI();
    } catch (_error) {
      error = _error;
      return console.error("error while receiving, probably the module that should receive data was not properly initialized");
    }
  };

  DataClass.prototype.send = function(obj) {
    return DataClass.scope.sendDataElem(obj);
  };

  DataClass.prototype.getObj = function(key) {
    return this.data[key];
  };

  DataClass.prototype.isDataEmpty = function() {
    console.log(Object.keys(this.data).length);
    return Object.keys(this.data).length === 0;
  };

  return DataClass;

})();

GameDataCtrl = (function() {
  function GameDataCtrl($scope, Socket) {
    var receivedPacket;
    $scope.name = "Espresso";
    $scope.data = new DataClass($scope);
    receivedPacket = false;
    Socket.on("data", function(data_k_v) {
      if (data_k_v === null) {
        return;
      }
      return $scope.data.recv(data_k_v.key, data_k_v.val);
    });
    $scope.sendDataElem = function(obj) {
      var data_k_v;
      data_k_v = {
        key: obj.key,
        val: obj.model
      };
      return Socket.emit("data", data_k_v);
    };
    $scope.requestCurrentData = function(key) {
      var data_k_v;
      data_k_v = {
        key: key,
        val: null
      };
      return Socket.emit("data", data_k_v);
    };
    $scope.getDataElem = function(obj) {
      return $scope.data.getObj(obj);
    };
    $scope.registerTick = function(key, elem) {
      var data_k_v;
      console.log("registering tick");
      data_k_v = {
        key: key,
        elem: elem
      };
      return Socket.emit('registerTick', data_k_v);
    };
    $scope.unregisterTick = function(key, elem) {
      var data_k_v;
      console.log("unregistering tick");
      data_k_v = {
        key: key,
        elem: elem
      };
      return Socket.emit('unregisterTick', data_k_v);
    };
    $scope.calcAge = function(dateString) {
      var birthday;
      birthday = +new Date(dateString);
      return ~~((Date.now() - birthday) / 31557600000.);
    };
    $scope.connectionLosses = 0;
    $scope.connectedOld = false;
    $scope.isConnected = function() {
      if (Socket.isConnected()) {
        $scope.connectedOld = true;
      }
      if (!Socket.isConnected() && $scope.connectedOld) {
        $scope.connectionLosses += 1;
        $scope.connectedOld = false;
      }
      return Socket.isConnected();
    };
  }

  return GameDataCtrl;

})();

DataElement = (function() {
  var scope;

  DataElement.prototype.key = "unkownElement";

  scope = null;

  function DataElement($scope) {
    $scope.doNotSend = true;
    $scope.model = null;
    $scope.key = this.key;
    this.scope = $scope;
    $scope.update = function() {
      if ($scope.doNotSend) {
        return console.log("sending not allowed now");
      } else {
        return $scope.data.send($scope);
      }
    };
    $scope.actionAllowed = function() {
      return !$scope.doNotSend;
    };
    $scope.refreshGUI = function() {
      return $scope.doNotSend = false;
    };
    $scope.getDownloadData = function() {
      var json;
      json = JSON.stringify($scope.model);
      return new Blob([json], {
        type: "application/json"
      });
    };
    $scope.updateModelAfterUpload = function() {
      return $scope.update();
    };
    $scope.getFile = function() {
      var reader;
      reader = new FileReader();
      reader.onload = function() {
        var newmodel, text;
        text = reader.result;
        newmodel = JSON.parse(text);
        $scope.model = newmodel;
        return $scope.updateModelAfterUpload();
      };
      return reader.readAsText($scope.file);
    };
    $scope.data.registerElem($scope.key, $scope);
    $scope.requestCurrentData($scope.key);
  }

  return DataElement;

})();

GameClock = (function(_super) {
  __extends(GameClock, _super);

  GameClock.prototype.key = "GameClock";

  GameClock.timeToSeconds = function(time) {
    var minutes, seconds;
    time = time.split(/:/);
    minutes = parseInt(time[0]);
    seconds = parseInt(time[1]);
    return minutes * 60 + seconds;
  };

  function GameClock($scope) {
    GameClock.__super__.constructor.call(this, $scope);
    $scope.model = {
      showClock: false,
      clockRunning: false,
      curTime: 0,
      info: 0,
      quarter: 0,
      timeOutsHome: 3,
      timeOutsGuests: 3
    };
    $scope.toggleClockVisibility = function() {
      $scope.model.showClock = !$scope.model.showClock;
      return $scope.update();
    };
    $scope.startClock = function() {
      if ($scope.model.curTime <= 0) {
        return;
      }
      $scope.model.clockRunning = true;
      $scope.update();
      if ($scope.actionAllowed()) {
        return $scope.registerTick($scope.key, 'curTime');
      }
    };
    $scope.stopClock = function() {
      $scope.model.clockRunning = false;
      $scope.update();
      if ($scope.actionAllowed()) {
        return $scope.unregisterTick($scope.key, 'curTime');
      }
    };
    $scope.toggleClockRunning = function() {
      if ($scope.model.clockRunning) {
        return $scope.stopClock();
      } else {
        return $scope.startClock();
      }
    };
    $scope.getClockVisible = function() {
      return $scope.model.showClock;
    };
    $scope.getClockRunning = function() {
      return $scope.model.clockRunning;
    };
    $scope.setTime = function() {
      var e, input, totalseconds;
      if (!$scope.enteredTime) {
        totalseconds = 720;
      } else {
        try {
          input = $scope.enteredTime;
          totalseconds = GameClock.timeToSeconds(input);
          if (isNaN(totalseconds)) {
            throw "input is NaN";
          }
          console.log('setting time to ' + totalseconds);
        } catch (_error) {
          e = _error;
          console.error('could not set time');
          return;
        }
      }
      $scope.model.curTime = totalseconds;
      $scope.enteredTime = '';
      return $scope.update();
    };
    $scope.getTime = function() {
      var minutes, seconds, value;
      value = $scope.model.curTime;
      seconds = value % 60;
      if (seconds < 10) {
        seconds = '0' + seconds;
      }
      minutes = Math.floor(value / 60);
      if (minutes < 10) {
        minutes = '0' + minutes;
      }
      return minutes + ":" + seconds;
    };
    $scope.$watch('model.curTime', function() {
      if ($scope.model.curTime <= 0) {
        $scope.model.curTime = 0;
        return $scope.stopClock();
      }
    });
    $scope.$watch('enteredTime', function() {
      var OPERATOR, minutes, seconds, time, timeToBeEntered;
      if ($scope.enteredTime == null) {
        $scope.enteredTime = '';
      }
      time = $scope.enteredTime.split(':').join('');
      OPERATOR = /^(\d*?)(\d{0,2}?):?(\d{0,2})$/;
      OPERATOR.exec(time);
      minutes = RegExp.$2;
      seconds = RegExp.$3;
      if (!seconds) {
        $scope.enteredTime = '';
        console.log("invalid time specified");
        return;
      }
      if (!minutes) {
        minutes = '00';
      }
      if (seconds.length < 2) {
        seconds = '0' + seconds;
      }
      timeToBeEntered = minutes + ":" + seconds;
      return $scope.enteredTime = timeToBeEntered;
    });
    $scope.setInfo = function(id) {
      $scope.model.info = id;
      return $scope.update();
    };
    $scope.getInfo = function() {
      var e;
      try {
        return parseInt($scope.model.info);
      } catch (_error) {
        e = _error;
        return 0;
      }
    };
    $scope.getQuarter = function() {
      return $scope.model.quarter;
    };
    $scope.tmpQuarterTxt = "";
    $scope.getQuarterTxt = function() {
      if ($scope.model.quarter === 0) {
        return $scope.tmpQuarterTxt;
      }
      switch ($scope.model.quarter) {
        case 1:
          $scope.tmpQuarterTxt = "1st";
          break;
        case 2:
          $scope.tmpQuarterTxt = "2nd";
          break;
        case 3:
          $scope.tmpQuarterTxt = "3rd";
          break;
        case 4:
          $scope.tmpQuarterTxt = "4th";
          break;
        case 5:
          $scope.tmpQuarterTxt = "OVT";
      }
      return $scope.tmpQuarterTxt;
    };
    $scope.$watch('enteredQuarter', function() {
      var _ref;
      if (!((5 >= (_ref = $scope.enteredQuarter) && _ref >= 0))) {
        return $scope.enteredQuarter = '';
      }
    });
    $scope.setQuarter = function(quarter) {
      if (quarter === void 0) {
        if ($scope.enteredQuarter) {
          quarter = $scope.enteredQuarter;
        } else {
          return false;
        }
      }
      if ((5 >= quarter && quarter >= 0)) {
        $scope.model.quarter = parseInt(quarter);
      }
      $scope.enteredQuarter = '';
      return $scope.update();
    };
  }

  return GameClock;

})(DataElement);

LowerThirds = (function(_super) {
  __extends(LowerThirds, _super);

  LowerThirds.prototype.key = "LowerThirds";

  function LowerThirds($scope) {
    var decisions_bloodhound, doInit, getTeam, playerTokenizer, players_guest_bloodhound, players_home_bloodhound, refToString, refereeDecisions;
    LowerThirds.__super__.constructor.call(this, $scope);
    $scope.model = {
      GPvisible: false,
      GPcontent: '',
      GPtemplates: [],
      RefVisible: false,
      RefDecision: null,
      PlayerVisible: false,
      PlayerDetailed: false,
      Player: null,
      loopNr: 0
    };
    refereeDecisions = [
      {
        num: 1,
        name: "Untimed down"
      }, {
        num: 1,
        name: "Ball ready for play"
      }, {
        num: 2,
        name: "Start Clock"
      }, {
        num: 3,
        name: "Time out"
      }, {
        num: 4,
        name: "TV/Radio time out"
      }, {
        num: 5,
        name: "Touchdown"
      }, {
        num: 5,
        name: "Field goal"
      }, {
        num: 5,
        name: "Point(s) after touchdown"
      }, {
        num: 6,
        name: "Safety"
      }, {
        num: 7,
        name: "Ball dead"
      }, {
        num: 7,
        name: "Touchback"
      }, {
        num: 8,
        name: "First down"
      }, {
        num: 9,
        name: "Loss of down"
      }, {
        num: 10,
        name: "Incomplete pass"
      }, {
        num: 10,
        name: "Penalty declined"
      }, {
        num: 10,
        name: "No play"
      }, {
        num: 10,
        name: "No score"
      }, {
        num: 10,
        name: "Toss option delayed"
      }, {
        num: 11,
        name: "Legal touching of forward pass"
      }, {
        num: 12,
        name: "Inadvertent whistle"
      }, {
        num: 13,
        name: "Disregard flag"
      }, {
        num: 14,
        name: "End of period"
      }, {
        num: 15,
        name: "Sideline warning"
      }, {
        num: 16,
        name: "Illegal touching"
      }, {
        num: 17,
        name: "Uncatchable forward pass"
      }, {
        num: 18,
        name: "Offside defence"
      }, {
        num: 19,
        name: "False start"
      }, {
        num: 19,
        name: "Illegal formation"
      }, {
        num: 19,
        name: "Encroachment offense"
      }, {
        num: 20,
        name: "Illegal shift"
      }, {
        num: 20,
        name: "Illegal motion"
      }, {
        num: 21,
        name: "Delay of game"
      }, {
        num: 22,
        name: "Substitution infraction"
      }, {
        num: 23,
        name: "Failure to wear required equipment"
      }, {
        num: 24,
        name: "Illegal helmet contact"
      }, {
        num: 27,
        name: "Unsportsmanlike conduct"
      }, {
        num: 27,
        name: "Noncontact foul"
      }, {
        num: 28,
        name: "Illegal participation"
      }, {
        num: 29,
        name: "Sideline interference"
      }, {
        num: 30,
        name: "Running into or roughing kicker or holder"
      }, {
        num: 31,
        name: "Illegal batting or kicking"
      }, {
        num: 32,
        name: "Illegal/invalid fair catch signal"
      }, {
        num: 33,
        name: "Forward pass interference"
      }, {
        num: 33,
        name: "Kick-catching interference"
      }, {
        num: 34,
        name: "Roughing passer"
      }, {
        num: 35,
        name: "Illegal pass"
      }, {
        num: 35,
        name: "Illegal forward handling"
      }, {
        num: 36,
        name: "Intentional grounding"
      }, {
        num: 37,
        name: "Ineligible downfield on pass"
      }, {
        num: 38,
        name: "Personal foul"
      }, {
        num: 39,
        name: "Clipping"
      }, {
        num: 40,
        name: "Blocking below waist"
      }, {
        num: 40,
        name: "Illegal block"
      }, {
        num: 41,
        name: "Chop block"
      }, {
        num: 42,
        name: "Holding"
      }, {
        num: 42,
        name: "Obstructing"
      }, {
        num: 42,
        name: "Illegal use of hand/arms"
      }, {
        num: 43,
        name: "Illegal block in the back"
      }, {
        num: 44,
        name: "Helping runner"
      }, {
        num: 44,
        name: "Interlocked blocking"
      }, {
        num: 45,
        name: "Grasping face mask or helmet opening"
      }, {
        num: 46,
        name: "Tripping"
      }, {
        num: 47,
        name: "Player disqualification"
      }
    ];
    refToString = function(obj) {
      return obj.num + " | " + obj.name;
    };
    decisions_bloodhound = new Bloodhound({
      datumTokenizer: (function(d) {
        return Bloodhound.tokenizers.whitespace(refToString(d));
      }),
      queryTokenizer: Bloodhound.tokenizers.whitespace,
      local: refereeDecisions
    });
    decisions_bloodhound.initialize();
    $scope.refOptions = {
      highlight: true,
      editable: false
    };
    $scope.refData = {
      displayKey: refToString,
      source: decisions_bloodhound.ttAdapter()
    };
    $scope.oldRefDecision = null;
    $scope.$watch('model.RefDecision', function() {
      if (JSON.stringify($scope.model.RefDecision) !== JSON.stringify($scope.oldRefDecision)) {
        $scope.update();
      }
      return $scope.oldRefDecision = $scope.model.RefDecision;
    });
    $scope.getRefVisible = function() {
      return $scope.model.RefVisible;
    };
    $scope.toggleRefVisibility = function() {
      $scope.model.RefVisible = !$scope.model.RefVisible;
      return $scope.update();
    };
    $scope.getRefContent = function() {
      return $scope.model.RefDecision;
    };
    $scope.getPlayerVisbileSmall = function() {
      return $scope.model.PlayerVisible && !$scope.model.PlayerDetailed;
    };
    $scope.getPlayerVisbileLarge = function() {
      return $scope.model.PlayerVisible && $scope.model.PlayerDetailed;
    };
    $scope.showPlayerSmall = function() {
      $scope.model.PlayerVisible = true;
      $scope.model.PlayerDetailed = false;
      return $scope.update();
    };
    $scope.showPlayerLarge = function() {
      $scope.model.PlayerVisible = true;
      $scope.model.PlayerDetailed = true;
      return $scope.update();
    };
    $scope.hidePlayer = function() {
      $scope.model.PlayerVisible = false;
      $scope.model.PlayerDetailed = false;
      return $scope.update();
    };
    $scope.setLoop = function(nr) {
      if (nr >= 0) {
        $scope.model.loopNr = nr;
        return $scope.update();
      }
    };
    $scope.getLoopNr = function() {
      return $scope.model.loopNr;
    };
    getTeam = function(team) {
      if (!$scope.getDataElem(team)) {
        console.error("Team not yet loaded");
      }
      return $scope.getDataElem(team).model.roster;
    };
    playerTokenizer = function(player) {
      return player.number + " | " + player.name;
    };
    players_home_bloodhound = new Bloodhound({
      datumTokenizer: (function(d) {
        return Bloodhound.tokenizers.whitespace(playerTokenizer(d));
      }),
      queryTokenizer: Bloodhound.tokenizers.whitespace,
      local: (function() {
        return getTeam("HomeTeam");
      })
    });
    players_guest_bloodhound = new Bloodhound({
      datumTokenizer: (function(d) {
        return Bloodhound.tokenizers.whitespace(playerTokenizer(d));
      }),
      queryTokenizer: Bloodhound.tokenizers.whitespace,
      local: (function() {
        return getTeam("GuestTeam");
      })
    });
    doInit = function() {
      if ((!$scope.getDataElem("HomeTeam").actionAllowed()) || (!$scope.getDataElem("GuestTeam").actionAllowed())) {
        console.log("waiting for team data to be valid...");
        setTimeout(doInit, 50);
        return;
      }
      players_home_bloodhound.initialize();
      return players_guest_bloodhound.initialize();
    };
    $scope.getPlayer = function() {
      return $scope.model.Player;
    };
    $scope.setPlayer = function() {
      $scope.model.Player = $scope.tmpPlayer;
      $scope.tmpPlayer = "";
      return $scope.update();
    };
    $scope.initBloodhound = function() {
      console.log("initializing player autocomplete");
      return doInit();
    };
    $scope.playerOptions = {
      highlight: true,
      editable: false
    };
    $scope.playerData = [
      {
        name: 'Home',
        displayKey: playerTokenizer,
        source: players_home_bloodhound.ttAdapter(),
        templates: {
          header: '<h4 class="team-name">Home Team</h4>'
        }
      }, {
        name: 'Guests',
        displayKey: playerTokenizer,
        source: players_guest_bloodhound.ttAdapter(),
        templates: {
          header: '<h4 class="team-name">Guest Team</h4>'
        }
      }
    ];
    $scope.player = null;
    $scope.tmpGPContent = '';
    $scope.curGPtemplate = null;
    $scope.$watch('model.GPcontent', function() {
      return $scope.tmpGPContent = $scope.model.GPcontent;
    });
    $scope.addGPTemplate = function() {
      var value, _i, _len, _ref;
      if ($scope.tmpGPContent) {
        _ref = $scope.model.GPtemplates;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          value = _ref[_i];
          if (value === $scope.tmpGPContent) {
            return;
          }
        }
        $scope.model.GPtemplates.push($scope.tmpGPContent);
        $scope.curGPtemplate = $scope.tmpGPContent;
        return $scope.update();
      }
    };
    $scope.removeGPTemplate = function() {
      var key, value, _i, _len, _ref, _results;
      _ref = $scope.model.GPtemplates;
      _results = [];
      for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
        value = _ref[key];
        if (value === $scope.curGPtemplate) {
          $scope.model.GPtemplates.splice(key, 1);
          _results.push($scope.update());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    $scope.$watch('curGPtemplate', function() {
      return $scope.tmpGPContent = $scope.curGPtemplate;
    });
    $scope.$watch('tmpGPContent', function() {
      return $scope.curGPtemplate = $scope.tmpGPContent;
    });
    $scope.setGPContent = function() {
      $scope.model.GPcontent = $scope.tmpGPContent;
      return $scope.update();
    };
    $scope.toggleGPVisibility = function() {
      $scope.model.GPvisible = !$scope.model.GPvisible;
      return $scope.update();
    };
    $scope.getGPVisible = function() {
      return $scope.model.GPvisible;
    };
    $scope.getGPContent = function(htmlstyled) {
      if (!htmlstyled) {
        return $scope.model.GPcontent;
      }
      return $scope.model.GPcontent.replace(/(?:\r\n|\r|\n)/g, '<br />');
    };
  }

  return LowerThirds;

})(DataElement);

Scoreboard = (function(_super) {
  __extends(Scoreboard, _super);

  Scoreboard.prototype.key = "Scoreboard";

  function Scoreboard($scope) {
    Scoreboard.__super__.constructor.call(this, $scope);
    $scope.model = {
      timeOutsHome: 3,
      timeOutsGuests: 3,
      pointsHome: 0,
      pointsGuests: 0,
      down: 0,
      distance: 10,
      posessionHome: true,
      visibleSmall: false,
      visibleBig: false
    };
    $scope.getBallPossession = function() {
      return $scope.model.posessionHome;
    };
    $scope.toggleBallPossession = function() {
      if ($scope.model.posessionHome) {
        $scope.model.posessionHome = false;
      } else {
        $scope.model.posessionHome = true;
      }
      return $scope.update();
    };
    $scope.getScorebardVisibleSmall = function() {
      return $scope.model.visibleSmall;
    };
    $scope.getScorebardVisibleBig = function() {
      return $scope.model.visibleBig;
    };
    $scope.showScoreboardSmall = function() {
      $scope.model.visibleSmall = true;
      $scope.model.visibleBig = false;
      return $scope.update();
    };
    $scope.showScoreboardBig = function() {
      $scope.model.visibleSmall = false;
      $scope.model.visibleBig = true;
      return $scope.update();
    };
    $scope.hideScoreboard = function() {
      $scope.model.visibleSmall = false;
      $scope.model.visibleBig = false;
      return $scope.update();
    };
    $scope.getTimoutsHome = function() {
      return $scope.model.timeOutsHome;
    };
    $scope.$watch('enteredTimeoutsHome', function() {
      var _ref;
      if ($scope.enteredTimeoutsHome === '-') {
        return;
      }
      if (!((3 >= (_ref = $scope.enteredTimeoutsHome) && _ref >= -1))) {
        return $scope.enteredTimeoutsHome = '';
      }
    });
    $scope.setTimoutsHome = function(nrTimeouts) {
      if (nrTimeouts === void 0) {
        if ($scope.enteredTimeoutsHome) {
          nrTimeouts = $scope.enteredTimeoutsHome;
        } else {
          return false;
        }
      }
      if ((3 >= nrTimeouts && nrTimeouts >= -1)) {
        $scope.model.timeOutsHome = parseInt(nrTimeouts);
      }
      $scope.enteredTimeoutsHome = '';
      return $scope.update();
    };
    $scope.getTimoutsGuests = function() {
      return $scope.model.timeOutsGuests;
    };
    $scope.$watch('enteredTimeoutsGuests', function() {
      var _ref;
      if ($scope.enteredTimeoutsGuests === '-') {
        return;
      }
      if (!((3 >= (_ref = $scope.enteredTimeoutsGuests) && _ref >= -1))) {
        return $scope.enteredTimeoutsGuests = '';
      }
    });
    $scope.setTimoutsGuests = function(nrTimeouts) {
      if (nrTimeouts === void 0) {
        if ($scope.enteredTimeoutsGuests) {
          nrTimeouts = $scope.enteredTimeoutsGuests;
        } else {
          return false;
        }
      }
      if ((3 >= nrTimeouts && nrTimeouts >= -1)) {
        $scope.model.timeOutsGuests = parseInt(nrTimeouts);
      }
      $scope.enteredTimeoutsGuests = '';
      return $scope.update();
    };
    $scope.getPoints = function(home) {
      if (home) {
        return $scope.model.pointsHome;
      } else {
        return $scope.model.pointsGuests;
      }
    };
    $scope.$watch('model.pointsHome', function() {
      return $scope.tmpHomePoints = $scope.model.pointsHome;
    });
    $scope.$watch('model.pointsGuests', function() {
      return $scope.tmpGuestPoints = $scope.model.pointsGuests;
    });
    $scope.$watch('tmpHomePoints', function() {
      if (isNaN($scope.tmpHomePoints) || parseInt($scope.tmpHomePoints) < 0) {
        return $scope.tmpHomePoints = $scope.model.pointsHome;
      }
    });
    $scope.$watch('tmpGuestPoints', function() {
      if (isNaN($scope.tmpGuestPoints) || parseInt($scope.tmpGuestPoints) < 0) {
        return $scope.tmpGuestPoints = $scope.model.pointsGuests;
      }
    });
    $scope.setPoints = function(home, points) {
      if (home === void 0) {
        if ($scope.tmpHomePoints) {
          $scope.setPoints(true, parseInt($scope.tmpHomePoints));
        }
        if ($scope.tmpGuestPoints) {
          $scope.setPoints(false, parseInt($scope.tmpGuestPoints));
        }
        return;
      }
      points = parseInt(points);
      if (!(points > -1)) {
        return;
      }
      if (home) {
        $scope.model.pointsHome = points;
      } else {
        $scope.model.pointsGuests = points;
      }
      return $scope.update();
    };
    $scope.getDown = function() {
      return $scope.model.down;
    };
    $scope.setDown = function(down) {
      if ((4 >= down && down >= 0)) {
        $scope.model.down = parseInt(down);
      }
      $scope.setDistance(-2);
      return $scope.update();
    };
    $scope.getDistance = function() {
      return $scope.model.distance;
    };
    $scope.$watch('enteredDistance', function() {
      var _ref;
      if ($scope.enteredDistance === '-') {
        return;
      }
      if (!((100 >= (_ref = $scope.enteredDistance) && _ref >= -2))) {
        return $scope.enteredDistance = '';
      }
    });
    $scope.setDistance = function(distance) {
      if (distance === void 0) {
        if ($scope.enteredDistance) {
          distance = $scope.enteredDistance;
        } else {
          distance = 10;
        }
      }
      if ((100 >= distance && distance >= -2)) {
        $scope.model.distance = parseInt(distance);
      }
      $scope.enteredDistance = '';
      return $scope.update();
    };
  }

  return Scoreboard;

})(DataElement);

Team = (function(_super) {
  __extends(Team, _super);

  Team.prototype.key = "unknownTeam";

  function Team($scope) {
    Team.__super__.constructor.call(this, $scope);
    $scope.model = {
      teamNameLong: null,
      teamNameShort: null,
      showRoster: false,
      teamColor: "#ff0000",
      roster: [],
      hue: 0
    };
    $scope.$watch("model.teamColor", function(newValue, oldValue) {
      return $scope.model.hue = $scope.getHue($scope.model.hue);
    });
    $scope.positions = [
      {
        value: 'HC',
        text: 'Headcoach',
        type: 0
      }, {
        value: 'OC',
        text: 'Offense Coordinator',
        type: 0
      }, {
        value: 'DC',
        text: 'Defense Coordinator',
        type: 0
      }, {
        value: 'SC',
        text: 'Special Coordinator',
        type: 0
      }, {
        value: 'OL',
        text: 'Offensive Line',
        type: 1
      }, {
        value: 'QB',
        text: 'Quarterback',
        type: 1
      }, {
        value: 'RB',
        text: 'Runningback',
        type: 1
      }, {
        value: 'WR',
        text: 'Wide Receiver',
        type: 1
      }, {
        value: 'TE',
        text: 'Tight End',
        type: 1
      }, {
        value: 'DL',
        text: 'Defensive Line',
        type: 2
      }, {
        value: 'LB',
        text: 'Linebacker',
        type: 2
      }, {
        value: 'DB',
        text: 'Defensive Back',
        type: 2
      }, {
        value: 'P',
        text: 'Punter',
        type: 3
      }, {
        value: 'K',
        text: 'Kicker',
        type: 3
      }, {
        value: 'ST',
        text: 'other Special',
        type: 3
      }
    ];
    $scope.getTeamNameLong = function() {
      return $scope.model.teamNameLong;
    };
    $scope.getTeamNameShort = function() {
      return $scope.model.teamNameShort;
    };
    $scope.toggleRosterVisibility = function() {
      $scope.model.showRoster = !$scope.model.showRoster;
      return $scope.update();
    };
    $scope.getRosterVisible = function() {
      return $scope.model.showRoster;
    };
    $scope.getTeamColor = function() {
      return $scope.model.teamColor;
    };
    function rgbToHsl(r, g, b){
      r /= 255, g /= 255, b /= 255;
      var max = Math.max(r, g, b), min = Math.min(r, g, b);
      var h, s, l = (max + min) / 2;
  
      if(max == min){
          h = s = 0; // achromatic
      }else{
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch(max){
              case r: h = (g - b) / d + (g < b ? 6 : 0); break;
              case g: h = (b - r) / d + 2; break;
              case b: h = (r - g) / d + 4; break;
          }
          h /= 6;
      }
  
      return [h, s, l];
    };
    $scope.getHue = function() {
      var b, color, g, hsl, r;
      color = $scope.model.teamColor;
      r = parseInt(color.substr(1, 2), 16);
      g = parseInt(color.substr(3, 2), 16);
      b = parseInt(color.substr(5, 2), 16);
      hsl = rgbToHsl(r, g, b);
      return parseInt(hsl[0] * 360);
    };
    $scope.showPositions = function(player) {
      var error, selected;
      selected = [];
      try {
        angular.forEach($scope.positions, function(s) {
          if (player.position.indexOf(s.value) >= 0) {
            return selected.push(s.text);
          }
        });
        if (selected.length) {
          return selected.join(', ');
        } else {
          return 'Not set';
        }
      } catch (_error) {
        error = _error;
        return 'Not set';
      }
    };
    $scope.updateModelAfterUpload = function() {
      var player, _i, _len, _ref;
      _ref = $scope.model.roster;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.team = $scope.key;
      }
      return $scope.update();
    };
    $scope.addPlayer = function() {
      $scope.inserted = {
        id: $scope.model.roster.length + 1,
        number: null,
        name: '',
        position: null,
        dob: null,
        size: null,
        weight: null,
        exp: null,
        nat: "AT",
        team: $scope.key
      };
      return $scope.model.roster.push($scope.inserted);
    };
    $scope.predicate = 'number';
    $scope.removePlayer = function(item) {
      $scope.model.roster.splice($scope.model.roster.indexOf(item), 1);
      return $scope.update();
    };
    $scope.sendPlayer = function(player) {
      var location;
      $scope.getDataElem("LowerThirds").model.Player = player;
      $scope.getDataElem("LowerThirds").update();
      location = "/#lower-thirds";
      return true;
    };
    $scope.checkName = function(data, id) {
      if (data === "") {
        return "Empty name not allowed";
      }
    };
  }

  return Team;

})(DataElement);

HomeTeam = (function(_super) {
  __extends(HomeTeam, _super);

  HomeTeam.prototype.key = "HomeTeam";

  function HomeTeam($scope) {
    HomeTeam.__super__.constructor.call(this, $scope);
  }

  return HomeTeam;

})(Team);

GuestTeam = (function(_super) {
  __extends(GuestTeam, _super);

  GuestTeam.prototype.key = "GuestTeam";

  function GuestTeam($scope) {
    GuestTeam.__super__.constructor.call(this, $scope);
  }

  return GuestTeam;

})(Team);

Audio = (function() {
  var scope;

  scope = null;

  function Audio($scope) {
    this.scope = $scope;
  }

  return Audio;

})();

AppCtrl = function($scope) {
  return $scope.name = "Espresso";
};

AppCtrl.$inject = ["$scope"];

HeaderController = function($scope, $location) {
  return $scope.isActive = function(viewLocation) {
    return viewLocation === $location.path();
  };
};

RosterController = function($scope, $routeParams) {
  $scope.team = $routeParams.team.toLowerCase();
  if ($scope.team === "home") {
    return new HomeTeam($scope);
  } else if ($scope.team === "guests") {
    return new GuestTeam($scope);
  } else {
    return $scope.team = "---INVALID---";
  }
};

RouteController = function($scope, $routeParams) {
  $scope.templateUrl = '/partials/manage/' + $routeParams.part;
  return console.log($scope.templateUrl);
};


/*
   Generated via coffescript-concat
   files in angular-concat/controllers
 */
